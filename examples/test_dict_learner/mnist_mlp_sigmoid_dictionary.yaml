!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1,
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        nvis: 784,
        layers: [
                 !obj:parameter_prediction.models.mlp.SubsampledDictionaryLayer {
                     layer_name: 'h0',
                     dim: 100,
                     dictionary: !obj:parameter_prediction.dictionaries.learned.AutoencoderDictionary {
                        ae_model: !pkl: 'dict_learn_layer0.pkl'
                     },
                 },
                 !obj:pylearn2.models.mlp.Sigmoid {
                     layer_name: 'h1',
                     dim: 100,
                     irange: 0.1,
                     max_col_norm: 1.9365,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
            ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .1,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              one_hot: 1,
                              start: 50000,
                              stop:  60000
                          },
                'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'test',
                              one_hot: 1,
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts
            {
                costs: [
                    !obj:pylearn2.costs.mlp.Default {
                    },
                    !obj:pylearn2.costs.mlp.WeightDecay {
                        # you need to include a coeff here for the static layer even though it's ignored
                        coeffs: [ 0.0, 0.00005, 0.00005 ],
                    }
                    ]
            },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 2
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
