!obj:pylearn2.train.Train {
    dataset: &train !obj:parameter_prediction.datasets.timit.TIMIT {
        which_set: 'train',
    },

    model: !obj:parameter_prediction.models.mlp.MLP {
        nvis: 429,
        layers: [

            !obj:parameter_prediction.models.mlp.PretrainedLayer {
                layer_name: "pretrained_1",
                freeze_params: False,
                layer_content: !obj:parameter_prediction.models.autoencoder.AutoencoderLayerExtractor {
                    autoencoder: !pkl: "models/pretrain_layer1.pkl",
                },
            },

            !obj:parameter_prediction.models.mlp.PretrainedLayer {
                layer_name: "pretrained_2",
                freeze_params: False,
                layer_content: !obj:parameter_prediction.models.autoencoder.AutoencoderLayerExtractor {
                    autoencoder: !pkl: "models/pretrain_layer2.pkl",
                },
            },

            !obj:pylearn2.models.mlp.Softmax {
                layer_name: "y",
                n_classes: 183,
                irange: 0.02,
            },

        ],
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 0.1,
        init_momentum: 0.7,
        monitoring_dataset: {
            'test': &test !obj:parameter_prediction.datasets.timit.TIMIT {
                which_set: 'test',
            },
        },

        cost: !obj:pylearn2.costs.mlp.Default {
        },

        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 100,
        },

        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },  

    extensions: [
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],  
    save_path: "models/${PYLEARN2_TRAIN_FILE_STEM}.pkl",
    save_freq: 1
}

