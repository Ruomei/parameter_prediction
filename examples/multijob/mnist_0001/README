Job Manager
===========

Tools for running batches of jobs and visualizing the results.

Very (very) rough around the edges.  You will need to do quite a bit of manual
work to make use of these tools, but it's still easier than doing everything by
hand.

This repository has a basic example of using the tools to train an mlp from
pylearn2.

These tools require quite a bit of manual editing.  I'm using them right now by
copying everything into a new folder and editing in place.


Quick overview with an example
==============================

First: Edit config.py and change the paths at the top to point to pylearn2 and
your pylearn2 data directory.

Run these commands:

    python run_jobs.py         # runs each example job
    python generate_report.py  # creates report.csv, summarizing the results
    python show_report.py      # plot the results

The example should run quickly, so you can run it from start to finish.

The output looks something like this:
.
├── report.csv
├── figures
│   ├── index.html
│   └── pdf and png files
└── scratch_space
    ├── 00000000
    │   └── ...
    ├── 00000001
    │   └── ...
    └── 00000002
        └── ...

scratch_space: Created by run_jobs.py.  Contains all of the job folders, each
job gets its own folder where all its templates live.  Jobs should write any
output they create into their own job folder.

report.csv: Created by generate_report.py.  Contains a summary of the results
in csv format.

figures: Generated by show_report.py.  Conatins all of the generated figures in
both png and pdf format.  Open the index.html file in a browser for easy
viewing.



Detailed Description
====================

config.py

This file defines some global configuration, and some functions to create new
job configurations.  You will need to edit this file to define new jobs.

A job is defined as a dictionary with two keys:

    templates: This is a list of dictionaries describing the templates needed
    by the job.

    task_params: This describes which file should be run to launch a job.  The
    launcher_file should be a shell script.

Each template configuation contains the following keys:

    target: The template will be instantiated into a file with this name.

    params_target: The parameters for the template will be stored in a yaml
    file with this name.

    src: Path to the template source file, relative to template_dir (also
    defined in config.py).
    
    params: Dictionary of parameters for the template.

Each job can instantiate arbitrarily many templates.  You describe each one in
this file.


run_jobs.py

This file sets up all of the jobs and launches them.  You need to set up the
tasks for the jobs that will be run here.  You need to edit this file.


generate_report.py

Once the jobs have all run, this script looks through the job directories and
assembles a csv file summarizing the results.  You will need to edit this file
if you change the job parameters.


show_report.py

This script interprets the csv file created by generate_report.py and makes
figures.  You will probably need to edit this file to make the plots you want.
There is a reasonably flexable plotting function provided but you may need to
tweak it.


Templates
=========

The templates directory contains templates that will be instantiated for each
job.  You can instantiate one or more templates for a single job, and not every
job needs to instantiate every template.

The example templates are very simple.  These templates are written in jinja2,
you can read about the differnt syntax that is available here: 

    http://jinja.pocoo.org/docs/templates/

Jinja is quite powerful, I recommend you at least skim through the
documentation to get an idea of what is possible.

