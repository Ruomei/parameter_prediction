!obj:pylearn2.train.Train {
    dataset: &train !obj:parameter_prediction.datasets.timit.TIMIT {
        which_set: 'train',
    },

    model: !obj:parameter_prediction.models.autoencoder.Autoencoder {
        nvis: {{n_vis}},
        act_dec: 'sigmoid',
        layer: !obj:parameter_prediction.models.mlp.MLP {
            layers: [
                !obj:parameter_prediction.models.mlp.CompositeLayer {
                    layer_name: 'h0',
                    layers: [
                        {% for column in columns %}
                        {% set column_index = loop.index0 %}


                        !obj:parameter_prediction.models.mlp.MLP {
                            layers: [
                                !obj:parameter_prediction.models.mlp.SubsampledDictionaryLayer {
                                    layer_name: 'h0-{{column_index}}-a',
                                    dim: {{column.n_atoms}},
                                    {% if loop.index0 == 0 %}

                                    dictionary: &dict !obj:parameter_prediction.dictionaries.learned.CovarianceDictionary {
                                        inputs: *train
                                    }

                                    {% else %}

                                    dictionary: *dict

                                    {% endif %}
                                },
                                !obj:parameter_prediction.models.mlp.Sigmoid {
                                    layer_name: 'h0-{{column_index}}-b',
                                    dim: {{column.n_hid}},
                                    irange: 0.1,
                                    max_col_norm: 1.9365,
                                },
                            ],
                        },

                    {% endfor %}
                    ],
                },

                !obj:parameter_prediction.models.mlp.VectorSpaceConverter {
                    layer_name: "space_converter",
                },
            ],
        },
    },


    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 0.1,
        init_momentum: 0.7,
        monitoring_dataset: {
            'test': &test !obj:parameter_prediction.datasets.timit.TIMIT {
                which_set: 'test',
            },
        },

        cost: !obj:pylearn2.costs.autoencoder.MeanSquaredReconstructionError {
        },

        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {{n_epochs}},
        },

        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },  

    extensions: [
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],  
    save_path: "{{job_dir}}/models/${PYLEARN2_TRAIN_FILE_STEM}.pkl",
    save_freq: 1
}

